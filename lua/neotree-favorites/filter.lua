-- –ö–∞—Å—Ç–æ–º–Ω—ã–π filter –¥–ª—è flat_favorites
-- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥—Ö–æ–¥ common.filters (orig_tree + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è), –Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç flat_favorites.reset_search

local Input = require("nui.input")
local popups = require("neo-tree.ui.popups")
local renderer = require("neo-tree.ui.renderer")
local utils = require("neo-tree.utils")
local compat = require("neo-tree.utils._compat")
local log = require("neo-tree.log")
local manager = require("neo-tree.sources.manager")
local fzy = require("neo-tree.sources.common.filters.filter_fzy")
local common_filter = require("neo-tree.sources.common.filters")

local M = {}

---Show filtered tree (–∏–∑ common.filters:57-94)
local function show_filtered_tree(state, do_not_focus_window)
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ window –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–Ω–æ–µ
  if not state.winid or not vim.api.nvim_win_is_valid(state.winid) then
    vim.notify("[FLAT_FAV] ‚ö†Ô∏è  Window is not valid, aborting filter", vim.log.levels.WARN)
    return
  end
  
  -- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º substring search –µ—Å–ª–∏ use_fzy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  local use_fzy = state.use_fzy
  if use_fzy == nil then
    use_fzy = false
  end
  
  -- DEBUG: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–∑–ª—ã –î–û —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  local function count_all_nodes(node_id, tree)
    local node = tree:get_node(node_id)
    if not node then return 0 end
    local count = 1
    if node:has_children() then
      for _, child_id in ipairs(node:get_child_ids()) do
        count = count + count_all_nodes(child_id, tree)
      end
    end
    return count
  end
  
  local nodes_before = 0
  for _, root in ipairs(state.orig_tree:get_nodes()) do
    nodes_before = nodes_before + count_all_nodes(root:get_id(), state.orig_tree)
  end
  
  vim.notify(
    string.format("üîç [FLAT_FAV] Searching: '%s' | Mode: %s | Nodes before: %d", 
      state.search_pattern or "", 
      use_fzy and "fuzzy" or "substring",
      nodes_before
    ),
    vim.log.levels.INFO
  )
  
  -- –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–ø–∏—é (–ù–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º!)
  state.tree = vim.deepcopy(state.orig_tree)
  state.tree:get_nodes()[1].search_pattern = state.search_pattern
  
  -- –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º winid –∏ bufnr –≤ –¥–µ—Ä–µ–≤–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "Invalid window" –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–∞—Ö
  if state.tree then
    if state.winid and vim.api.nvim_win_is_valid(state.winid) then
      state.tree.winid = state.winid
    end
    if state.bufnr and vim.api.nvim_buf_is_valid(state.bufnr) then
      state.tree.bufnr = state.bufnr
    end
  end
  
  local max_score, max_id = fzy.get_score_min(), nil
  local folders_to_expand = {}  -- –ü–∞–ø–∫–∏ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å
  
  -- –ü–æ–ª—É—á–∞–µ–º "–±–∞–∑–æ–≤—ã–π" –ø—É—Ç—å (–∫–æ—Ä–µ–Ω—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ) –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
  local base_path = state.path  -- –û–±—ã—á–Ω–æ —ç—Ç–æ cwd –ø—Ä–æ–µ–∫—Ç–∞
  
  local function filter_tree(node_id)
    local node = state.tree:get_node(node_id)
    local full_path = node.extra.search_path or node.path
    
    local should_keep
    if use_fzy then
      -- Fuzzy search (–∫–∞–∫ –≤ "#" fuzzy_sorter) - –∏—â–µ–º –ø–æ –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û–ú–£ –ø—É—Ç–∏
      -- –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ /home/username/
      local search_path = full_path
      
      -- –ù–∞—Ö–æ–¥–∏–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –∏–∑ –∫–æ—Ä–Ω—è –¥–µ—Ä–µ–≤–∞
      local favorite_folders = {}
      if state.orig_tree then
        local root_nodes = state.orig_tree:get_nodes()
        if root_nodes and #root_nodes > 0 then
          -- –ü–µ—Ä–≤—ã–π —É–∑–µ–ª - —ç—Ç–æ –∫–æ—Ä–µ–Ω—å "üì¶ Flat Favorites"
          local flat_root = root_nodes[1]
          if flat_root and flat_root:has_children() then
            -- –î–µ—Ç–∏ root'–∞ - —ç—Ç–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ (composition, react, etc)
            for _, child_id in ipairs(flat_root:get_child_ids()) do
              local child = state.orig_tree:get_node(child_id)
              if child and child.type == "directory" then
                table.insert(favorite_folders, child.name .. "/")
              end
            end
          end
        end
      end
      
      -- –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –æ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
      -- –í–ê–ñ–ù–û: –ò—â–µ–º –ü–û–°–õ–ï–î–ù–ï–ï –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ) —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      local best_pos = nil
      local best_pattern = nil
      for _, pattern in ipairs(favorite_folders) do
        -- –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è pattern –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        local pos = 1
        while true do
          local found_pos = search_path:find(pattern, pos, true)
          if not found_pos then break end
          best_pos = found_pos
          best_pattern = pattern
          pos = found_pos + 1
        end
      end
      
      -- –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –æ–±—Ä–µ–∑–∞–µ–º –æ—Ç –Ω–µ—ë
      if best_pos then
        search_path = search_path:sub(best_pos)
      end
      
      should_keep = fzy.has_match(state.search_pattern, search_path)
      if should_keep then
        local score = fzy.score(state.search_pattern, search_path)
        node.extra.fzy_score = score
        node.extra.fzy_search_path = search_path  -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if score > max_score then
          max_score = score
          max_id = node_id
        end
      end
    else
      -- Substring search (–∫–∞–∫ –≤ "/" fuzzy_finder) - –∏—â–µ–º –¢–û–õ–¨–ö–û –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      local filename = node.name  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏!
      local lower_filename = filename:lower()
      local lower_pattern = state.search_pattern:lower()
      should_keep = lower_filename:find(lower_pattern, 1, true) ~= nil
      -- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–æ–∫—É—Å–∞
      if should_keep and not max_id and node.type == "file" then
        max_id = node_id
      end
    end
    
    local has_matching_children = false
    if node:has_children() then
      for _, child_id in ipairs(node:get_child_ids()) do
        local child_kept = filter_tree(child_id)
        if child_kept then
          has_matching_children = true
        end
        should_keep = child_kept or should_keep
      end
    end
    
    -- –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    if node.type == "directory" and (should_keep or has_matching_children) then
      table.insert(folders_to_expand, node_id)
    end
    
    if not should_keep then
      state.tree:remove_node(node_id)
    end
    return should_keep
  end
  
  local matched_count = 0
  local file_matches = {}
  local tree_structure = {}
  local fuzzy_examples = {}  -- –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è fuzzy –ø–æ–∏—Å–∫–∞
  
  if state.search_pattern and #state.search_pattern > 0 then
    for _, root in ipairs(state.tree:get_nodes()) do
      filter_tree(root:get_id())
    end
    
    -- –ö–†–ò–¢–ò–ß–ù–û: –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    -- NuiTree.remove_node –∏–Ω–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–∞–ø–æ–∫
    local duplicates_removed = 0
    local function dedupe_tree_nodes(parent_id)
      local parent = state.tree:get_node(parent_id)
      if not parent or not parent:has_children() then
        return
      end
      
      local seen_paths = {}  -- –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –ø–æ –ü–£–¢–ò, –Ω–µ –ø–æ ID!
      local children_to_remove = {}
      
      for _, child_id in ipairs(parent:get_child_ids()) do
        local child = state.tree:get_node(child_id)
        if child then
          local path_key = child.path or child.id
          if seen_paths[path_key] then
            -- –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –ø—É—Ç–∏!
            table.insert(children_to_remove, child_id)
            duplicates_removed = duplicates_removed + 1
          else
            seen_paths[path_key] = true
            -- –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –¥–µ—Ç–µ–π
            dedupe_tree_nodes(child_id)
          end
        end
      end
      
      -- –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      for _, dup_id in ipairs(children_to_remove) do
        state.tree:remove_node(dup_id)
      end
    end
    
    for _, root in ipairs(state.tree:get_nodes()) do
      dedupe_tree_nodes(root:get_id())
    end
    
    if duplicates_removed > 0 then
      vim.notify(
        string.format("üîß [FLAT_FAV] Removed %d duplicate nodes", duplicates_removed),
        vim.log.levels.WARN
      )
    end
    
    -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É–∑–ª—ã –∏ —Å—Ç—Ä–æ–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
    local function build_tree_structure(node_id, level)
      local node = state.tree:get_node(node_id)
      if not node then return 0 end
      
      local indent = string.rep("  ", level)
      local icon = node.type == "directory" and "üìÅ" or "üìÑ"
      local line = string.format("%s%s %s", indent, icon, node.name)
      table.insert(tree_structure, line)
      
      local count = 1
      
      -- –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      if node.type == "file" then
        table.insert(file_matches, node.path)
        
        -- –î–ª—è fuzzy –ø–æ–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π
        if use_fzy and #fuzzy_examples < 5 and node.extra and node.extra.fzy_search_path then
          table.insert(fuzzy_examples, string.format(
            "Original: %s\nSearched: %s\nScore: %.2f",
            node.path,
            node.extra.fzy_search_path,
            node.extra.fzy_score or 0
          ))
        end
      end
      
      if node:has_children() then
        for _, child_id in ipairs(node:get_child_ids()) do
          count = count + build_tree_structure(child_id, level + 1)
        end
      end
      return count
    end
    
    for _, root in ipairs(state.tree:get_nodes()) do
      matched_count = matched_count + build_tree_structure(root:get_id(), 0)
    end
    
    -- DEBUG: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    local result_msg = string.format(
      "‚úÖ [FLAT_FAV] Results: %d nodes matched | %d folders to expand",
      matched_count,
      #folders_to_expand
    )
    vim.notify(result_msg, vim.log.levels.INFO)
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–µ –ø–∞–ø–∫–∏)
    if #file_matches > 0 then
      local files_msg = string.format("üìÑ Found %d files:\n%s", #file_matches, table.concat(file_matches, "\n"))
      vim.notify(files_msg, vim.log.levels.INFO)
    end
    
    -- –î–ª—è fuzzy –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π
    if use_fzy and #fuzzy_examples > 0 then
      local fuzzy_msg = "üîç Fuzzy search examples:\n" .. table.concat(fuzzy_examples, "\n---\n")
      vim.notify(fuzzy_msg, vim.log.levels.INFO)
    end
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Å—Ç—Ä–æ–∫)
    if #tree_structure > 0 then
      local max_lines = 50
      local tree_msg_lines = {}
      for i = 1, math.min(#tree_structure, max_lines) do
        table.insert(tree_msg_lines, tree_structure[i])
      end
      if #tree_structure > max_lines then
        table.insert(tree_msg_lines, string.format("... –∏ –µ—â–µ %d —É–∑–ª–æ–≤", #tree_structure - max_lines))
      end
      local tree_msg = "üå≥ Tree structure:\n" .. table.concat(tree_msg_lines, "\n")
      vim.notify(tree_msg, vim.log.levels.INFO)
    end
    
    -- –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–∑–ª–æ–≤, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if matched_count > 1000 then
      vim.notify(
        string.format("‚ö†Ô∏è  [FLAT_FAV] Too many matches (%d nodes)! Consider more specific search.", matched_count),
        vim.log.levels.WARN
      )
    end
  end
  
  -- –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫–∏ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ default_expanded_nodes (–∫–∞–∫ –≤ fs_scan.lua:653)
  if #folders_to_expand > 0 then
    state.default_expanded_nodes = folders_to_expand
  end
  
  -- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–æ–∫ –î–û redraw
  if #folders_to_expand > 0 and state.tree then
    renderer.set_expanded_nodes(state.tree, folders_to_expand)
  end
  
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ window –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ø–µ—Ä–µ–¥ redraw
  if not state.winid or not vim.api.nvim_win_is_valid(state.winid) then
    log.warn("[FLAT_FAV FILTER] Window became invalid before redraw, aborting")
    return
  end
  
  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º renderer.redraw –≤–º–µ—Å—Ç–æ manager.redraw –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è expanded
  renderer.redraw(state)
  
  if max_id then
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ window –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ø–µ—Ä–µ–¥ focus
    if state.winid and vim.api.nvim_win_is_valid(state.winid) then
      renderer.focus_node(state, max_id, do_not_focus_window)
    end
  end
end

M.show_filter = function(state, search_as_you_type, use_fzy, keep_filter_on_submit)
  
  -- DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∏—Å–∫–∞
  local mode_name = use_fzy and "fuzzy (#)" or "substring (/)"
  vim.notify(
    string.format("üîé [FLAT_FAV] Opening search | Mode: %s | Live: %s", 
      mode_name,
      search_as_you_type and "yes" or "no"
    ),
    vim.log.levels.INFO
  )
  
  local winid = vim.api.nvim_get_current_win()
  local height = vim.api.nvim_win_get_height(winid)
  local scroll_padding = 3
  
  -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  state.use_fzy = use_fzy
  state._filter_use_fzy = use_fzy  -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ reset
  
  -- –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  local popup_msg
  if search_as_you_type then
    popup_msg = use_fzy and "Fuzzy Filter:" or "Filter:"
  else
    popup_msg = use_fzy and "Fuzzy Search:" or "Search:"
  end
  
  local width = vim.fn.winwidth(0) - 2
  local row = height - 3
  
  if state.current_position == "float" then
    scroll_padding = 0
    width = vim.fn.winwidth(winid)
    row = height - 2
    vim.api.nvim_win_set_height(winid, row)
  end
  
  local popup_options = popups.popup_options(popup_msg, width, {
    relative = "win",
    winid = winid,
    position = { row = row, col = 0 },
    size = width,
  })
  
  -- –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó (–∫–∞–∫ common.filters:124)
  if not state.orig_tree then
    state.orig_tree = vim.deepcopy(state.tree)
    -- –û–±–Ω–æ–≤–ª—è–µ–º winid/bufnr –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –¥–µ—Ä–µ–≤–µ
    if state.orig_tree then
      if state.winid and vim.api.nvim_win_is_valid(state.winid) then
        state.orig_tree.winid = state.winid
      end
      if state.bufnr and vim.api.nvim_buf_is_valid(state.bufnr) then
        state.orig_tree.bufnr = state.bufnr
      end
    end
  end
  
  -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
  local has_pre_search_folders = utils.truthy(state.open_folders_before_search)
  if not has_pre_search_folders then
    state.open_folders_before_search = renderer.get_expanded_nodes(state.tree)
  end
  
  local waiting_for_default_value = utils.truthy(state.search_pattern)
  local input = Input(popup_options, {
    prompt = " ",
    default_value = state.search_pattern,
    on_submit = function(value)
      if value == "" then
        vim.notify("‚Ü©Ô∏è  [FLAT_FAV] Submit with empty value - resetting search", vim.log.levels.INFO)
        -- –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞
        local flat_favorites = require("neotree-favorites")
        flat_favorites.reset_search(state)
      else
        if search_as_you_type and not keep_filter_on_submit then
          vim.notify(
            string.format("‚Ü©Ô∏è  [FLAT_FAV] Enter pressed - opening file and resetting search (pattern: '%s')", value),
            vim.log.levels.INFO
          )
          -- Enter —Å search_as_you_type - –≤—ã–∑—ã–≤–∞–µ–º –ù–ê–® reset_search
          local flat_favorites = require("neotree-favorites")
          flat_favorites.reset_search(state, true, true)
          return
        end
        vim.notify(
          string.format("‚Ü©Ô∏è  [FLAT_FAV] Submit search: '%s'", value),
          vim.log.levels.INFO
        )
        state.search_pattern = value
        show_filtered_tree(state, false)
      end
    end,
    on_change = function(value)
      if not search_as_you_type then
        return
      end
      
      -- –û–±—Ä–∞–±–æ—Ç–∫–∞ default value
      if waiting_for_default_value then
        if #value < #(state.search_pattern or "") then
          return
        end
        waiting_for_default_value = false
      end
      
      if value == state.search_pattern or value == nil then
        return
      end
      
      if value == "" then
        if state.search_pattern == nil then
          return
        end
        
        vim.notify("üóëÔ∏è  [FLAT_FAV] Search cleared - resetting to original tree", vim.log.levels.INFO)
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º open_folders_before_search –∫–∞–∫ –≤ filesystem (filter.lua:159-164)
        local original_open_folders = nil
        if type(state.open_folders_before_search) == "table" then
          original_open_folders = vim.deepcopy(state.open_folders_before_search, compat.noref())
        end
        
        -- –ö–†–ò–¢–ò–ß–ù–û: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ vim.schedule —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å E565
        vim.schedule(function()
          -- –í—ã–∑—ã–≤–∞–µ–º reset_search –∫–∞–∫ –≤ filesystem
          local flat_favorites = require("neotree-favorites")
          flat_favorites.reset_search(state)
          
          -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          state.open_folders_before_search = original_open_folders
          state.use_fzy = state._filter_use_fzy  -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        end)
      else
        -- DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        vim.notify(
          string.format("‚å®Ô∏è  [FLAT_FAV] Typing: '%s' (length: %d)", value, #value),
          vim.log.levels.INFO
        )
        
        state.search_pattern = value
        
        -- Debounce —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        local delay = #value > 3 and 100 or (#value > 2 and 200 or (#value > 1 and 400 or 500))
        utils.debounce(state.name .. "_filter", function()
          -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ pattern –≤—Å–µ –µ—â–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ –±—ã–ª –æ—á–∏—â–µ–Ω)
          if not state.search_pattern or state.search_pattern == "" then
            vim.notify("üóëÔ∏è  [FLAT_FAV] Pattern was cleared, skipping filter", vim.log.levels.INFO)
            return
          end
          show_filtered_tree(state, true)
        end, delay, utils.debounce_strategy.CALL_LAST_ONLY)
      end
    end,
  })
  
  input:mount()
  
  local restore_height = vim.schedule_wrap(function()
    if vim.api.nvim_win_is_valid(winid) then
      vim.api.nvim_win_set_height(winid, height)
    end
  end)
  
  -- Commands –¥–ª—è popup
  local cmds = {
    move_cursor_down = function(_state, _scroll_padding)
      renderer.focus_node(_state, nil, true, 1, _scroll_padding)
    end,
    move_cursor_up = function(_state, _scroll_padding)
      renderer.focus_node(_state, nil, true, -1, _scroll_padding)
      vim.cmd("redraw!")
    end,
    close = function(_state)
      vim.notify("‚ùå [FLAT_FAV] Search popup closed (Esc)", vim.log.levels.INFO)
      vim.cmd("stopinsert")
      input:unmount()
      if utils.truthy(_state.search_pattern) then
        vim.notify(
          string.format("üîÑ [FLAT_FAV] Resetting search after close (pattern was: '%s')", _state.search_pattern),
          vim.log.levels.INFO
        )
        local flat_favorites = require("neotree-favorites")
        flat_favorites.reset_search(_state, true)
      end
      restore_height()
    end,
    close_keep_filter = function(_state, _scroll_padding)
      log.info("Persisting the search filter")
      keep_filter_on_submit = true
      cmds.close(_state, _scroll_padding)
    end,
    close_clear_filter = function(_state, _scroll_padding)
      log.info("Clearing the search filter")
      keep_filter_on_submit = false
      cmds.close(_state, _scroll_padding)
    end,
  }
  
  common_filter.setup_hooks(input, cmds, state, scroll_padding)
  common_filter.setup_mappings(input, cmds, state, scroll_padding)
end

return M
